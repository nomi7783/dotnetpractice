table name:
1- employee
2- employeedata
3- department

======================================================
SQL command:

1- create database noman
2- use noman
3- drop database noman


======================================================
=====create employee table======

create table employee(
e_id int not null,
e_name varchar(20),
e_salary int,
e_age int,
e_gender varchar(20),
primary key(e_id)
);


======================================================
=====inserting data in employee table======

insert into employee values(
	2, 'arman' , 55000 , 28 , 'male'
);



======================================================
=====inserting data in employee table in a single query======

INSERT INTO employee
  (e_id,e_name,e_salary,e_age,e_gender )
VALUES
  (1, 'Noman' , 30000 , 24 , 'Male'), 
  (2, 'Arman' , 35000 , 28 , 'Male'), 
  (3, 'Salman' , 40000 , 20 , 'Male'),
  (4, 'Ayesha' , 45000 , 22 , 'Female'),
  (5, 'Zainab' , 50000 , 26 , 'Female');

======================================================
=====selecting data in employee table======

1- select * from employee;
2- select e_name from employee;
3- select e_name,e_salary,e_age from  employee;


======================================================
=====selecting Distinct data in employee table======

select distinct e_gender from employee;


======================================================
===== where clause =====
1- select * from employee where e_gender= 'Female';
2- select * from employee where e_age< 25;


======================================================
===== AND , OR , NOT =====
--AND
1- select * from employee where e_gender= 'Female' AND e_age< 25;
--OR
1- select * from employee where e_gender= 'male' OR e_age> 25;
--NOT
1- select * from employee where NOT e_gender= 'male';


======================================================
wildcard characeters:
1-  % (represent zero, one or multiple characters)
2-  _ (represent single characters)

===== LKE , BETWEEN =====
--LIKE
1- select * from employee where e_name LIKE 's%';       //all name starts with "s" //it represent zero,one or multiple characters
2- select * from employee where e_age LIKE '2_';        //selecting age b/w 20-29  //it represent single characters


--BETWEEN (selection b/w age of 20-30)
1- select * from employee where e_age BETWEEN 20 AND 30;



======================================================
=====MATH Functions=====
1- MIN Function
select min(e_age) from employee;

2- MAX Function
select MAX(e_age) from employee;

3- COUNT Function
select count(*) from employee where e_gender='Female';

4- SUM Function
select sum(e_salary) from employee;

4- AVG Function
select AVG(e_age) from employee;


======================================================
=====String Functions=====

1- LTRIM()
select '        noman'
select ltrim('        noman')

2- LOWER()
select 'THIS IS NOMAN'
select lower('THIS IS NOMAN')

3- UPPER()
select 'this is noman'
select upper('this is noman')

4- REVERSE()
select 'THIS IS NOMAN'
select reverse('THIS IS NOMAN')

5- SUBSTRING()
select 'THIS IS NOMAN'
select substring('THIS IS NOMAN',8,6)


======================================================
=====ORDER BY=====
BY default it is in ascending order..

1- select * from employee order by e_age;
2- select * from employee order by e_age DESC;

======================================================
=====TOP CLAUSE=====
It is use to get N number of records..

1-  select top 3 * from employee;

selecing most recent added employee
2- select top 3 * from employee order by e_age DESC;


======================================================
=====GROUP BY=====(IS USED TO AGGREGRATE RESULT WITH RESPECT TO A GROUP )

selecting male average age and female average age seprately..
1- select avg(e_age),e_gender from employee group by e_gender;
2- select avg(e_age),e_gender from employee group by e_gender order by avg(e_age) DESC;




======================================================
=====HAVING CLAUSE=====(USED IN COMBINATION WITH GROUP BY TO IMPOSE CONDITIONS ON GROUP )

SELECTION OF ONLY THOSE DEPARTEMENT THAT HAS AVERAGE SALARY OF MORE THAN 60000.. 
select avg(e_salary),e_dept 
from employeedata 
group by e_dept
having avg(e_salary) > 60000;


======================================================
=====UPDATE STATEMENT=====(MODIFY EXISTING RECORDS IN A TABLE)

1- update employeedata set e_age=50 where e_name='sarwar';
2- update employeedata set e_age=50 where e_name='sarwar' and e_dept='SEO';

======================================================
=====DELETE STATEMENT=====(DELETE EXISTING RECORDS IN A TABLE)

1- delete from employeedata where e_name='sarwar' and e_dept='SEO'

======================================================
=====TRUNCATE STATEMENT=====(DELETE ALL EXISTING RECORDS IN A TABLE)

1- truncate table employeedata;


======================================================
=====INNER JOIN=====(it shows same data b/w 2 tables)

select * from department;
select * from employeedata;

select employeedata.e_name, employeedata.e_dept ,department.d_name ,department.d_location
from employeedata
inner join department 
on employeedata.e_dept = department.d_name;


======================================================
=====LEFT JOIN=====(RETURNS ALL DATA FROM LEFT TABLE AND MATCHED RECORDS FROM RIGHT TABLES )

select * from department;
select * from employeedata;

select employeedata.e_name, employeedata.e_dept ,department.d_name ,department.d_location
from employeedata
left join department 
on employeedata.e_dept = department.d_name;


======================================================
=====RIGHT JOIN=====(RETURNS ALL DATA FROM RIGHT TABLE AND MATCHED RECORDS FROM LEFT  TABLES )

select * from department;
select * from employeedata;

select employeedata.e_name, employeedata.e_dept ,department.d_name ,department.d_location
from employeedata
right join department 
on employeedata.e_dept = department.d_name;



======================================================
=====FULL JOIN=====(RETURNS ALL DATA FROM RIGHT TABLE AND LEFT TABLE & MAKE NULL THOSE RECORDS THAT ARE NOT MATCHED )

select * from department;
select * from employeedata;

select employeedata.e_name, employeedata.e_dept ,department.d_name ,department.d_location
from employeedata
right join department 
on employeedata.e_dept = department.d_name;



======================================================
=====UPDATE USING JOIN=====

select * from department;
select * from employeedata;

update employeedata 
set e_age= e_age + 10 
from employeedata
join department on employeedata.e_dept = department.d_name
where d_location='hyderabad';

======================================================
=====DELETE USING JOIN=====

select * from employeedata;
select * from department;

delete employeedata
from employeedata
join department on employeedata.e_dept = department.d_name
where d_location='hyderabad';


======================================================
=====UNION OPERATOR=====(USED TO COMBINE RESULT OF 2 SELECT)

select * from employeedata
union
select * from department

======================================================
=====UNION ALL OPERATOR===(USED TO COMBINE RESULT OF 2 SELECT INCLUDING DUPLICATE RECORDS)

select * from employeedata
union all
select * from department

======================================================
=====EXCEPT OPERATOR===(USED TO COMBINE RESULT OF 2 SELECT AND RETURN ONLY UNIQUE RECORD FROM LEFT TABLE WHICH IS NOT A PART OF RIGHT TABLE)

select * from employeedata
except
select * from department


======================================================
=====INTERSECT OPERATOR===(USED TO COMBINE RESULT OF 2 SELECT and result same records that is present in both the table)

select * from employeedata
intersect
select * from department


======================================================
=====VIEW===== (IT IS A VIRTUAL TABLE BASED ON THE RESULT OF AN SQL STATE )

create view female_employee as
select * from employeedata
where e_gender='female'

======================================================
=====DROP VIEW===== 
drop view female_employee;

======================================================
=====ALTER TABLE=====(USE TO ADD,DELETE,MODIFY COLUMMNS IN A TABLE) 

alter table employeedata
add e_dob date;

select * from employeedata;

======================================================
=====ALTER TABLE DROP=====

alter table employeedata
drop column e_dob;

select * from employeedata;

======================================================
=====MERGE=====(IT IS A COMBINATION OF INSERT,DELETE AND UPDATE STATEMENT)

............................
create table employee_target(
e_id int not null,
e_name varchar(20),
e_salary int,
e_age int,
primary key(e_id)
);

insert into employee_target values(
	1, 'arman' , 55000 , 28
);

insert into employee_target values(
	2, 'noman' , 65000 , 32
);

insert into employee_target values(
	5, 'salman' , 75000 , 36
);

insert into employee_target values(
	6, 'ashar' , 85000 , 40
);

insert into employee_target values(
	7, 'danish' , 95000 , 45
);
............................


............................
create table employee_source(
e_id int not null,
e_name varchar(20),
e_salary int,
e_age int,
primary key(e_id)
);

insert into employee_source values(
	1, 'arman' , 60000 , 30
);

insert into employee_source values(
	2, 'noman' , 60000 , 30
);
insert into employee_source values(
	3, 'shani' , 10000 , 40
);

insert into employee_source values(
	4, 'sheroze' , 10000 , 40
);
insert into employee_source values(
	5, 'salman' , 60000 , 30
);

............................


merge employee_target as t
using employee_source as s
on t.e_id = s.e_id
when matched
	then update set t.e_salary = s.e_salary , t.e_age = s.e_age
when not matched by target
	then insert(e_id,e_name,e_salary,e_age)
	values(s.e_id,s.e_name,s.e_salary,s.e_age)
when not matched by source
	then delete;


======================================================
=====USER DEFINED PERSON=====
IT HAS 2 TYPES.
1- SCALAR VALUED
2- TABLE VALUED

............................
1-SCALAR VALUED:(returns a scalar value)

create function five(@num as int)
returns int
as 
begin
return(
@num+5
)
end
select dbo.five(1)
............................


............................
1-TABLE VALUED:(returns a TABLE)

create function select_gender(@gender as varchar(20))
returns table
as
return(
 select * from employeedata where e_gender=@gender
)
select * from dbo.select_gender('female');
............................


======================================================
=====TEMPORARY TABLES=====(ONLY EXIST FOR A SESSION)

create table #student(
s_id int not null,
s_name varchar(20),
);

select * from #student;


======================================================
=====CASE STATEMENT=====(IT HELPS IN MULTI WAY SELECTION MAKING)

............................
select 
case 
when 10>20 then '10 is greater than 20'
when 10<20 then '10 is less than 20'
else '10 is equal to 20'
end
............................


........adding grade column according to salary using case statement....................

select * , grade = 
case
when e_salary<50000 then 'C'
when e_salary>76000 then 'B'
else 'A'
end
from employeedata
go
............................



======================================================
=====IIF STATEMENT=====

.....adding employee_generation column according to AGE using IIF statement.....

select e_id,e_name,e_age,
iif(e_age<30, 'YOUNG' , 'OLD') as employee_generation from employeedata

............................


======================================================
=====STORED PROCEDURE IN SQL=====(IS IS PREPARED SQL CODE WHICH CAN BE SAVED & REUSED)

........(without parameter)....................
create procedure employee_age
as
select e_age from employeedata
go

exec employee_age
............................

........(with parameter)....................
create procedure gender_employee @gender varchar(20)
as
select * from employeedata
where e_gender= @gender
go

exec gender_employee @gender='Male'
............................


======================================================
=====EXCEPTION HANDLING=====

...........DIVIDE INT VALUE WITH ZERO.................
declare @val1 int;
declare @val2 int;

begin try
set @val1=8;
set @val2= @val1/0;
end try

begin catch
print error_message()
end catch
............................


...........MERGE STRING VALUE WITH INT VALUE.................
begin try
select e_salary+e_name from employeedata
end try

begin catch
print 'cannot merge string value with int value'
end catch
............................


======================================================
=====TRANSACTION=====(GROUP OF COMMANDS THAT CHANGE DATA STORED IN A DATABASE)

............................
begin try
	begin transaction
	update employeedata set e_salary=50 where e_gender='male';
	update employeedata set e_salary=195 where e_gender='female';
	commit transaction
	print 'TRANSACTION COMMITED'
end try

begin catch
	rollback transaction
	print 'TRANSACTION ROLLBACK'
end catch


select * from employeedata
............................












